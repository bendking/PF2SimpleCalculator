{"version":3,"sources":["ColorModeSwitcher.tsx","useAttack.ts","useDamage.ts","useStrike.ts","SimpleStrike.tsx","SimpleCalculator.tsx","App.tsx","template_scripts/reportWebVitals.ts","template_scripts/serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","useAttack","_bonus","_MAP","_AC","useState","bonus","setBonus","MAP","setMAP","AC","setAC","critRate","console","log","Math","min","max","calculateCritRate","hitRate","calculateHitRate","useDamage","_die","_dieMultiplier","_modifier","die","setDie","dieMultiplier","setDieMultiplier","modifier","setModifier","damage","calculateDamage","calculateResult","parseNumber","str","parseInt","parseExpression","evaluate","SimpleStrike","strikeName","setStrike","removeStrike","_damageDie","_damageDieMultiplier","_damageModifier","setAttackBonus","setAttackMAP","setAttackAC","setDamageDie","setDamageDieMultiplier","setDamageModifier","e","preventDefault","currentTarget","value","useStrike","result","handleBonusChange","handleMAPChange","handleACChange","handleDieChange","handleDieMultiplierChange","handleModifierChange","useEffect","p","minW","maxW","borderWidth","borderRadius","overflow","Close","colorScheme","justifySelf","spacing","as","children","type","onChange","orientation","mt","toFixed","SimpleCalculator","strike_1","strikes","setStrikes","strikeCounter","setStrikeCounter","useCallback","strikeValue","prev","prevStrikesDamage","overallDamage","Object","values","reduce","a","b","strikesList","keys","map","strike","columns","rows","prevCounter","Add","App","theme","minH","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb47df5f.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import { useState } from \"react\";\r\n\r\nconst calculateHitRate = (bonus: number, MAP: number, AC: number): number => {\r\n    console.log(`1 - (AC - bonus + 1 - MAP) / 20 = 1 - ${(AC - bonus + 1 - MAP) / 20} = ${1-((AC - bonus + 1 - MAP) / 20)}`)\r\n    return Math.min(1 - ((AC - bonus + 1 - MAP) / 20), 0.55);\r\n}\r\n\r\nconst calculateCritRate = (bonus: number, MAP: number, AC: number): number => {\r\n    if ((AC - bonus) > 20) {\r\n        return 0;\r\n    }\r\n\r\n    console.log(`1 - (AC - bonus + 11 - MAP) / 20 = 1 - ${(AC - bonus + 11 - MAP) / 20} = ${1-((AC - bonus + 11 - MAP) / 20)}`)\r\n    return Math.min(Math.max(1-((AC - bonus + 11 - MAP) / 20), 0.05), 0.95);\r\n}\r\n\r\nexport const useAttack = (_bonus: number, _MAP: number, _AC: number) => {\r\n    const [bonus, setBonus] = useState(_bonus);\r\n    const [MAP, setMAP] = useState(_MAP);\r\n    const [AC, setAC] = useState(_AC);\r\n\r\n    const critRate: number = calculateCritRate(bonus, MAP, AC)\r\n    const hitRate: number = Math.max(Math.min(calculateHitRate(bonus, MAP, AC), 1 - critRate), 0)\r\n  \r\n  return [\r\n    hitRate,\r\n    critRate,\r\n    bonus,\r\n    MAP,\r\n    AC,\r\n    setBonus,\r\n    setMAP,\r\n    setAC,\r\n  ] as const;\r\n} \r\n\r\n\r\n","import { useState } from \"react\";\r\n\r\nconst calculateDamage = (die: number, dieMultiplier: number, modifier: number): number => {\r\n    return ((die + 1) / 2) * dieMultiplier + modifier;\r\n  };\r\n\r\nexport const useDamage = (_die: number, _dieMultiplier: number, _modifier: number) => {\r\n    const [die, setDie] = useState(_die);\r\n    const [dieMultiplier, setDieMultiplier] = useState(_dieMultiplier);\r\n    const [modifier, setModifier] = useState(_modifier);\r\n\r\n    const damage = calculateDamage(die, dieMultiplier, modifier)\r\n\r\n  return [\r\n    damage,\r\n    die,\r\n    dieMultiplier,\r\n    modifier,\r\n    setDie,\r\n    setDieMultiplier,\r\n    setModifier,\r\n  ] as const;\r\n\r\n} \r\n\r\n\r\n","import { evaluate } from \"mathjs\"\r\nimport { useAttack } from \"./useAttack\"\r\nimport { useDamage } from \"./useDamage\"\r\n\r\nconst calculateResult = (hitRate: number, critRate: number, damage: number) => {\r\n  console.log('Hit rate:' + hitRate);\r\n  console.log('Crit rate:' + critRate);\r\n  return (hitRate * damage) + (critRate * damage * 2);\r\n}\r\n\r\nconst parseNumber = (str: string): number => {\r\n  return parseInt(str) || 0;\r\n}\r\n\r\nconst parseExpression = (str: string): number => {\r\n  return evaluate(str) || 0;\r\n}\r\n\r\nexport const useStrike = (\r\n  _attackBonus: number = 7,\r\n  _attackMAP: number = 0,\r\n  _attackAC: number = 20,\r\n  _damageDie: number = 8,\r\n  _damageDieMultiplier: number = 1,\r\n  _damageModifier: number = 4\r\n) => {\r\n  const [hitRate, critRate, bonus, MAP, AC, setAttackBonus, setAttackMAP, setAttackAC] = useAttack(_attackBonus, _attackMAP, _attackAC);\r\n  const [damage, die, dieMultiplier, modifier, setDamageDie, setDamageDieMultiplier, setDamageModifier] = useDamage(_damageDie, _damageDieMultiplier, _damageModifier);\r\n\r\n  const result = calculateResult(hitRate, critRate, damage);\r\n\r\n  const handleBonusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n    setAttackBonus(parseNumber(e.currentTarget.value));\r\n  };\r\n\r\n  const handleMAPChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n    setAttackMAP(parseNumber(e.currentTarget.value));\r\n  };\r\n\r\n  const handleACChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n    setAttackAC(parseNumber(e.currentTarget.value));\r\n  };\r\n\r\n  const handleDieChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n    setDamageDie(parseNumber(e.currentTarget.value));\r\n  };\r\n\r\n  const handleDieMultiplierChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n    setDamageDieMultiplier(parseNumber(e.currentTarget.value));\r\n  };\r\n\r\n  const handleModifierChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n    setDamageModifier(parseExpression(e.currentTarget.value));\r\n  };\r\n\r\n  return [\r\n    result,\r\n    bonus, MAP, AC,\r\n    die, dieMultiplier, modifier,\r\n    handleBonusChange,\r\n    handleMAPChange,\r\n    handleACChange,\r\n    handleDieChange,\r\n    handleDieMultiplierChange,\r\n    handleModifierChange,\r\n  ] as const;\r\n};","import React, { useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  VStack,\r\n  HStack,\r\n  Center,\r\n  Heading,\r\n  Text,\r\n  Input,\r\n  Box,\r\n  InputGroup,\r\n  InputLeftAddon,\r\n  Badge,\r\n  Divider,\r\n  IconButton,\r\n} from \"@chakra-ui/react\";\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\n\r\nimport { useStrike } from \"./useStrike\";\r\n\r\ntype SimpleStrikeProps = {\r\n  strikeName: string;\r\n  setStrike: Function;\r\n  removeStrike: Function;\r\n};\r\n\r\nexport function SimpleStrike({ strikeName, setStrike, removeStrike }: SimpleStrikeProps) {\r\n  const [\r\n    result,\r\n    bonus,\r\n    MAP,\r\n    AC,\r\n    die,\r\n    dieMultiplier,\r\n    modifier,\r\n    handleBonusChange,\r\n    handleMAPChange,\r\n    handleACChange,\r\n    handleDieChange,\r\n    handleDieMultiplierChange,\r\n    handleModifierChange,\r\n  ] = useStrike();\r\n\r\n  useEffect(() => {\r\n    // Update parent component of current average damage\r\n    setStrike(strikeName, result);\r\n  }, [setStrike, strikeName, result]);\r\n\r\n  return (\r\n    <Box p=\"6\" minW=\"md\" maxW=\"xl\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\">\r\n      <Grid>\r\n        <IconButton\r\n          onClick={() => removeStrike(strikeName)}\r\n          icon={<CloseIcon />}\r\n          aria-label=\"Remove strike\"\r\n          size=\"xs\"\r\n          colorScheme=\"blue\"\r\n          justifySelf=\"flex-end\"\r\n        />\r\n        <HStack spacing={3}>\r\n          <VStack spacing={3} maxW=\"9em\">\r\n            <Heading as=\"h4\" size=\"md\">\r\n              Attack\r\n            </Heading>\r\n            <InputGroup size=\"md\">\r\n              <InputLeftAddon minW=\"8em\" children=\"Attack Bonus\" />\r\n              <Input type=\"number\" value={bonus} onChange={handleBonusChange} />\r\n            </InputGroup>\r\n            <InputGroup size=\"md\">\r\n              <InputLeftAddon minW=\"8em\" children=\"MAP\" />\r\n              <Input type=\"number\" value={MAP} onChange={handleMAPChange} />\r\n            </InputGroup>\r\n            <InputGroup size=\"md\">\r\n              <InputLeftAddon minW=\"8em\" children=\"AC\" />\r\n              <Input type=\"number\" value={AC} onChange={handleACChange} />\r\n            </InputGroup>\r\n          </VStack>\r\n          <Divider orientation=\"vertical\" />\r\n          <VStack spacing={3} maxW=\"9em\">\r\n            <Heading as=\"h4\" size=\"md\">\r\n              Damage\r\n            </Heading>\r\n            <InputGroup size=\"md\">\r\n              <InputLeftAddon minW=\"8em\" children=\"Die Size\" />\r\n              <Input type=\"number\" value={die} onChange={handleDieChange} />\r\n            </InputGroup>\r\n            <InputGroup size=\"md\">\r\n              <InputLeftAddon minW=\"8em\" children=\"Die Multiplier\" />\r\n              <Input type=\"number\" value={dieMultiplier} onChange={handleDieMultiplierChange} />\r\n            </InputGroup>\r\n            <InputGroup size=\"md\">\r\n              <InputLeftAddon minW=\"8em\" children=\"Modifiers\" />\r\n              <Input type=\"number\" value={modifier} onChange={handleModifierChange} />\r\n            </InputGroup>\r\n          </VStack>\r\n        </HStack>\r\n        <Badge borderRadius=\"full\" fontSize=\"0.8em\" p=\"2\" mt=\"20px\" colorScheme=\"blue\">\r\n          <Center>Average Damage: {result.toFixed(3)}</Center>\r\n        </Badge>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n","import React, { useState, useCallback } from \"react\";\r\n\r\nimport { SimpleGrid, VStack, HStack, Center } from \"@chakra-ui/layout\";\r\nimport { Stat, StatLabel, StatNumber, IconButton, Text } from \"@chakra-ui/react\";\r\nimport { AddIcon } from \"@chakra-ui/icons\";\r\n\r\nimport { SimpleStrike } from \"./SimpleStrike\";\r\n\r\nexport function SimpleCalculator() {\r\n  const [strikes, setStrikes] = useState<Record<string, number>>({ strike_1: 0 });\r\n  const [strikeCounter, setStrikeCounter] = useState(1);\r\n\r\n  //  used to create, update and remove strikes from the strikesDamage object\r\n  const setStrike = useCallback(\r\n    (strikeName: string, strikeValue: number) => {\r\n      setStrikes((prev) => ({\r\n        ...prev,\r\n        [strikeName]: strikeValue,\r\n      }));\r\n    },\r\n    [setStrikes]\r\n  );\r\n\r\n  const removeStrike = useCallback((strikeName: string) => {\r\n    setStrikes((prevStrikesDamage) => {\r\n      const { [strikeName]: removed, ...rest } = prevStrikesDamage;\r\n      return rest;\r\n    });\r\n  }, []);\r\n\r\n  const addStrike = () => {\r\n    setStrike(`strike_${strikeCounter + 1}`, 0);\r\n\t\tsetStrikeCounter((prevCounter) => prevCounter + 1);\r\n  };\r\n\r\n\tconsole.log(strikes)\r\n\r\n  const overallDamage = Object.values(strikes).reduce((a, b) => a + b, 0);\r\n\r\n  const strikesList = Object.keys(strikes).map((strike) => (\r\n    <SimpleStrike strikeName={strike} setStrike={setStrike} removeStrike={removeStrike} />\r\n  ));\r\n\r\n  return (\r\n    <VStack spacing={30}>\r\n      <Stat>\r\n        <StatLabel>\r\n          <Text fontSize=\"2vh\">Overall Damage</Text>\r\n        </StatLabel>\r\n        <StatNumber>\r\n          <Text fontSize=\"4vh\">{overallDamage.toFixed(3)}</Text>\r\n        </StatNumber>\r\n      </Stat>\r\n      <SimpleGrid spacing={4} columns={[1, null, 3]} rows={[1, null, 3]} >\r\n        {strikesList}\r\n\t\t\t\t<Center>\r\n\t\t\t\t\t<IconButton aria-label=\"Add strike\" onClick={addStrike} icon={<AddIcon />} colorScheme=\"blue\" />\r\n\t\t\t\t</Center>\r\n      </SimpleGrid>\r\n    </VStack>\r\n  );\r\n}\r\n\r\n// const removeStrike = (strikeName: string) => (\r\n// \tuseCallback(\r\n// \t\t(strikeName: string) => {\r\n// \t\t\tsetStrikesDamage((prev) => ({\r\n// \t\t\t\t...prev,\r\n// \t\t\t\t[strikeName]: undefined,\r\n// \t\t\t}));\r\n// \t\t},\r\n// \t\t[],\r\n// \t)\r\n// )\r\n","import * as React from \"react\";\n\nimport { ChakraProvider, Box, Grid, theme } from \"@chakra-ui/react\";\n\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport { SimpleCalculator } from \"./SimpleCalculator\";\n\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <Box fontSize=\"xl\">\n      <Grid minH=\"60vh\" p={3}>\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\n        <SimpleCalculator />\n      </Grid>\n    </Box>\n  </ChakraProvider>\n);\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./template_scripts/reportWebVitals\"\nimport * as serviceWorker from \"./template_scripts/serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}