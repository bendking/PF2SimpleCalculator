{"version":3,"sources":["components/ColorModeSwitcher.tsx","components/info_drawers/InfoDrawer.tsx","components/info_drawers/ACByLevel.tsx","components/info_drawers/AttackByLevel.tsx","hooks/useAttack.ts","hooks/useDamage.ts","hooks/useStrike.ts","components/StrikeInput.tsx","components/SimpleStrike.tsx","components/SimpleRoutine.tsx","components/SimpleCalculator.tsx","utils/util_functions.ts","App.tsx","template_scripts/reportWebVitals.ts","template_scripts/serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","InfoDrawer","infoName","tableHeaders","tableRows","useDisclosure","isOpen","onOpen","onClose","btnRef","React","useRef","tableHeader","map","header","tableBody","row","values","value","ref","colorScheme","rightIcon","ArrowForward","borderRadius","placement","finalFocusRef","ACByLevel","AttackByLevel","useAttack","_bonus","_MAP","_AC","useState","bonus","setBonus","MAP","setMAP","AC","setAC","critRate","console","log","Math","min","max","calculateCritRate","hitRate","calculateHitRate","useDamage","_die","_dieMultiplier","_modifier","die","setDie","dieMultiplier","setDieMultiplier","modifier","setModifier","damage","calculateDamage","calculateResult","setParsedValue","valueAsString","valueAsNumber","setValue","StrikeInput","inputName","handleValueChange","minW","children","type","onChange","SimpleStrike","routineName","strikeName","setStrike","removeStrike","_damageDie","_damageDieMultiplier","_damageModifier","setAttackBonus","setAttackMAP","setAttackAC","setDamageDie","setDamageDieMultiplier","setDamageModifier","useStrike","result","handleBonusChange","handleMAPChange","handleACChange","handleDieChange","handleDieMultiplierChange","handleModifierChange","useEffect","p","maxW","borderWidth","overflow","Close","justifySelf","spacing","as","orientation","mt","toFixed","SimpleRoutine","removeRoutine","renameRoutine","strikes","addStrike","strikesList","Object","keys","columns","rows","padding","placeholder","gridColumnStart","defaultValue","onBlur","event","target","border","textAlign","_focus","_hover","Add","SimpleCalculator","strike_1","routines","setRoutines","routineCounter","setRoutineCounter","strikeCounter","setStrikeCounter","setRoutine","useCallback","routineValue","prevRoutines","oldRoutineName","newRoutineName","oldObject","oldKey","newKey","reduce","newObject","key","strikeValue","prevCounter","routine","rest","routinesDamageList","entries","a","b","i","whiteSpace","routineList","position","left","App","theme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.717ef108.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import React from \"react\";\r\n\r\nimport {\r\n  Button,\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  useDisclosure,\r\n  Table,\r\n  Tbody,\r\n  Td,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n} from \"@chakra-ui/react\";\r\nimport { ArrowForwardIcon } from \"@chakra-ui/icons\";\r\n\r\nconst generateTableRow = (values: Array<number>) => (\r\n  <Tr>\r\n    {values.map((value) => (\r\n      <Td key={value}>{value}</Td>\r\n    ))}\r\n  </Tr>\r\n);\r\n\r\ntype InfoDrawerProps = {\r\n  infoName: string;\r\n  tableHeaders: Array<string>;\r\n  tableRows: Array<Array<number>>;\r\n};\r\n\r\nexport function InfoDrawer({ infoName, tableHeaders, tableRows }: InfoDrawerProps) {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef: any = React.useRef();\r\n\r\n  const tableHeader = (\r\n    <Thead>\r\n      <Tr>\r\n        {tableHeaders.map((header) => (\r\n          <Th key={header}>{header}</Th>\r\n        ))}\r\n      </Tr>\r\n    </Thead>\r\n  );\r\n\r\n  const tableBody = <Tbody>{tableRows.map((row) => generateTableRow(row))}</Tbody>;\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        ref={btnRef}\r\n        colorScheme=\"blue\"\r\n        onClick={onOpen}\r\n        rightIcon={<ArrowForwardIcon />}\r\n        borderRadius=\"0 30px 30px 0\"\r\n      >\r\n        {infoName}\r\n      </Button>\r\n      <Drawer size=\"md\" isOpen={isOpen} placement=\"left\" onClose={onClose} finalFocusRef={btnRef}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerCloseButton />\r\n          <DrawerHeader>{infoName}</DrawerHeader>\r\n\r\n          <DrawerBody>\r\n            <Table size=\"sm\">\r\n              {tableHeader}\r\n              {tableBody}\r\n            </Table>\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nimport { InfoDrawer } from './InfoDrawer'\r\n\r\nconst tableName = \"AC By Level\"\r\nconst tableHeaders = ['Level', 'Extreme', 'High', 'Moderate', 'Low']\r\nconst tableRows: Array<Array<number>> = [\r\n    [-1, 18, 15, 14, 12],\r\n    [0, 19, 16, 15, 13],\r\n    [1, 19, 16, 15, 13],\r\n    [2, 21, 18, 17, 15],\r\n    [3, 22, 19, 18, 16],\r\n    [4, 24, 21, 20, 18],\r\n    [5, 25, 22, 21, 19],\r\n    [6, 27, 24, 23, 21],\r\n    [7, 28, 25, 24, 22],\r\n    [8, 30, 27, 26, 24],\r\n    [9, 31, 28, 27, 25],\r\n    [10, 33, 30, 29, 27],\r\n    [11, 34, 31, 30, 28],\r\n    [12, 36, 33, 32, 30],\r\n    [13, 37, 34, 33, 31],\r\n    [14, 39, 36, 35, 33],\r\n    [15, 40, 37, 36, 34],\r\n    [16, 42, 39, 38, 36],\r\n    [17, 43, 40, 39, 37],\r\n    [18, 45, 42, 41, 39],\r\n    [19, 46, 43, 42, 40],\r\n    [20, 48, 45, 44, 42],\r\n    [21, 49, 46, 45, 43],\r\n    [22, 51, 48, 47, 45],\r\n    [23, 52, 49, 48, 46],\r\n    [24, 54, 51, 50, 48],\r\n]\r\n\r\nexport function ACByLevel() {\r\n    return (\r\n        <InfoDrawer infoName={tableName} tableHeaders={tableHeaders} tableRows={tableRows}/>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport { InfoDrawer } from './InfoDrawer'\r\n\r\nconst tableName = \"Attack By Level\"\r\nconst tableHeaders = ['Level', 'Caster', 'Martial', 'Fighter']\r\nconst tableRows: Array<Array<number>> = [\r\n    [1, 6, 7, 9],\r\n    [2, 8, 9, 11], // +1 Potency Rune\r\n    [3, 9, 10, 12],\r\n    [4, 10, 11, 13],\r\n    [5, 12, 13, 16], // +2 Martial (Proficiency) / + 1 Caster (Ability)\r\n    [6, 13, 15, 17],\r\n    [7, 15, 16, 18],\r\n    [8, 16, 17, 19],\r\n    [9, 17, 18, 20],\r\n    [10, 18, 21, 23], // +1 Greater Potency Rune / +1 Martial (Ability)\r\n    [11, 21, 22, 24], // +2 Caster (Proficiency)\r\n    [12, 22, 23, 25],\r\n    [13, 23, 26, 28], // +2 Martial (Profiency)\r\n    [14, 24, 27, 29],\r\n    [15, 26, 28, 30], // +1 Caster (Ability)\r\n    [16, 28, 30, 32], // + 1 Major Potency Rune\r\n    [17, 29, 31, 33],\r\n    [18, 30, 32, 34],\r\n    [19, 31, 33, 36],\r\n    [20, 32, 35, 37], // +1 Martial\r\n]\r\n\r\nexport function AttackByLevel() {\r\n    return (\r\n        <InfoDrawer infoName={tableName} tableHeaders={tableHeaders} tableRows={tableRows}/>\r\n    )\r\n}\r\n\r\n","import { useState } from \"react\";\r\n\r\nconst calculateHitRate = (bonus: number, MAP: number, AC: number): number => {\r\n    console.log(`1 - (AC - bonus - MAP) / 20 = 1 - ${(AC - bonus - MAP) / 20} = ${1-((AC - bonus - MAP) / 20)}`)\r\n    return Math.min(1 - ((AC - bonus - MAP) / 20), 0.50);\r\n}\r\n\r\nconst calculateCritRate = (bonus: number, MAP: number, AC: number): number => {\r\n    if ((AC - bonus) > 20) {\r\n        return 0;\r\n    }\r\n\r\n    console.log(`1 - (AC - bonus + 9 - MAP) / 20 = 1 - ${(AC - bonus + 9 - MAP) / 20} = ${1-((AC - bonus + 9 - MAP) / 20)}`)\r\n    return Math.min(Math.max(1-((AC - bonus + 9 - MAP) / 20), 0.05), 0.95);\r\n}\r\n\r\nexport const useAttack = (_bonus: number, _MAP: number, _AC: number) => {\r\n    const [bonus, setBonus] = useState(_bonus);\r\n    const [MAP, setMAP] = useState(_MAP);\r\n    const [AC, setAC] = useState(_AC);\r\n\r\n    const critRate: number = calculateCritRate(bonus, MAP, AC)\r\n    const hitRate: number = Math.max(Math.min(calculateHitRate(bonus, MAP, AC), 1 - critRate), 0)\r\n  \r\n  return [\r\n    hitRate,\r\n    critRate,\r\n    bonus,\r\n    MAP,\r\n    AC,\r\n    setBonus,\r\n    setMAP,\r\n    setAC,\r\n  ] as const;\r\n} \r\n\r\n\r\n","import { useState } from \"react\";\r\n\r\nconst calculateDamage = (die: number, dieMultiplier: number, modifier: number): number => {\r\n    return ((die + 1) / 2) * dieMultiplier + modifier;\r\n  };\r\n\r\nexport const useDamage = (_die: number, _dieMultiplier: number, _modifier: number) => {\r\n    const [die, setDie] = useState(_die);\r\n    const [dieMultiplier, setDieMultiplier] = useState(_dieMultiplier);\r\n    const [modifier, setModifier] = useState(_modifier);\r\n\r\n    const damage = calculateDamage(die, dieMultiplier, modifier)\r\n\r\n  return [\r\n    damage,\r\n    die,\r\n    dieMultiplier,\r\n    modifier,\r\n    setDie,\r\n    setDieMultiplier,\r\n    setModifier,\r\n  ] as const;\r\n\r\n} \r\n\r\n\r\n","import { useAttack } from \"./useAttack\"\r\nimport { useDamage } from \"./useDamage\"\r\n\r\nconst calculateResult = (hitRate: number, critRate: number, damage: number) => {\r\n  // console.log('Hit rate: ' + hitRate.toFixed(2));\r\n  // console.log('Hit Damage: '+ damage)\r\n  // console.log('Crit rate: ' + critRate.toFixed(2));\r\n  // console.log('Crit damage: ' + damage*2)\r\n  return (hitRate * damage) + (critRate * damage * 2);\r\n}\r\n\r\nfunction setParsedValue(valueAsString: string, valueAsNumber: number, setValue: Function) {\r\n  valueAsString === '' ? setValue(0) : setValue(valueAsNumber);\r\n}\r\n\r\nexport const useStrike = (\r\n  _attackBonus: number = 7,\r\n  _attackMAP: number = 0,\r\n  _attackAC: number = 16,\r\n  _damageDie: number = 8,\r\n  _damageDieMultiplier: number = 1,\r\n  _damageModifier: number = 4\r\n) => {\r\n  const [hitRate, critRate, bonus, MAP, AC, setAttackBonus, setAttackMAP, setAttackAC] = useAttack(_attackBonus, _attackMAP, _attackAC);\r\n  const [damage, die, dieMultiplier, modifier, setDamageDie, setDamageDieMultiplier, setDamageModifier] = useDamage(_damageDie, _damageDieMultiplier, _damageModifier);\r\n\r\n  const result = calculateResult(hitRate, critRate, damage);\r\n\r\n  const handleBonusChange = (valueAsString: string, valueAsNumber: number) => {\r\n    setParsedValue(valueAsString, valueAsNumber, setAttackBonus)\r\n  };\r\n\r\n  const handleMAPChange = (valueAsString: string, valueAsNumber: number) => {\r\n    setParsedValue(valueAsString, valueAsNumber, setAttackMAP)\r\n  };\r\n\r\n  const handleACChange = (valueAsString: string, valueAsNumber: number) => {\r\n    setParsedValue(valueAsString, valueAsNumber, setAttackAC)\r\n  };\r\n\r\n  const handleDieChange = (valueAsString: string, valueAsNumber: number) => {\r\n    setParsedValue(valueAsString, valueAsNumber, setDamageDie)\r\n  };\r\n\r\n  const handleDieMultiplierChange = (valueAsString: string, valueAsNumber: number) => {\r\n    setParsedValue(valueAsString, valueAsNumber, setDamageDieMultiplier)\r\n  };\r\n\r\n  const handleModifierChange = (valueAsString: string, valueAsNumber: number) => {\r\n    setParsedValue(valueAsString, valueAsNumber, setDamageModifier)\r\n  };\r\n\r\n  // const handleBonusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n  //   e.preventDefault();\r\n  //   setAttackBonus(parseNumber(e.currentTarget.value));\r\n  // };\r\n\r\n  // const handleMAPChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n  //   e.preventDefault();\r\n  //   setAttackMAP(parseNumber(e.currentTarget.value));\r\n  // };\r\n\r\n  // const handleACChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n  //   e.preventDefault();\r\n  //   setAttackAC(parseNumber(e.currentTarget.value));\r\n  // };\r\n\r\n  // const handleDieChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n  //   e.preventDefault();\r\n  //   setDamageDie(parseNumber(e.currentTarget.value));\r\n  // };\r\n\r\n  // const handleDieMultiplierChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n  //   e.preventDefault();\r\n  //   setDamageDieMultiplier(parseNumber(e.currentTarget.value));\r\n  // };\r\n\r\n  // const handleModifierChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n  //   e.preventDefault();\r\n  //   setDamageModifier(parseExpression(e.currentTarget.value));\r\n  // };\r\n\r\n  return [\r\n    result,\r\n    bonus, MAP, AC,\r\n    die, dieMultiplier, modifier,\r\n    handleBonusChange,\r\n    handleMAPChange,\r\n    handleACChange,\r\n    handleDieChange,\r\n    handleDieMultiplierChange,\r\n    handleModifierChange,\r\n  ] as const;\r\n};","import React from \"react\";\r\n\r\nimport {\r\n  InputGroup,\r\n  InputLeftAddon,\r\n  NumberInput,\r\n  NumberInputField,\r\n  NumberIncrementStepper,\r\n  NumberInputStepper,\r\n  NumberDecrementStepper,\r\n} from \"@chakra-ui/react\";\r\n\r\ntype StrikeInputProps = {\r\n  inputName: string;\r\n  value: number | string;\r\n  handleValueChange: (valueAsString: string, valueAsNumber: number) => void;\r\n};\r\n\r\nexport function StrikeInput({inputName, value, handleValueChange}: StrikeInputProps) {\r\n  return (\r\n    <InputGroup size=\"md\">\r\n      <InputLeftAddon minW=\"8em\" children={inputName} />\r\n      <NumberInput type=\"number\" value={value} onChange={handleValueChange}>\r\n        <NumberInputField />\r\n        <NumberInputStepper>\r\n          <NumberIncrementStepper />\r\n          <NumberDecrementStepper />\r\n        </NumberInputStepper>\r\n      </NumberInput>\r\n    </InputGroup>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  VStack,\r\n  HStack,\r\n  Center,\r\n  Heading,\r\n  Box,\r\n  Badge,\r\n  Divider,\r\n  IconButton,\r\n} from \"@chakra-ui/react\";\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\n\r\nimport { useStrike } from \"../hooks/useStrike\";\r\nimport { StrikeInput } from \"./StrikeInput\"\r\n\r\ntype SimpleStrikeProps = {\r\n  routineName: string;\r\n  strikeName: string;\r\n  setStrike: Function;\r\n  removeStrike: Function;\r\n};\r\n\r\nexport function SimpleStrike({ routineName, strikeName, setStrike, removeStrike }: SimpleStrikeProps) {\r\n  const [\r\n    result,\r\n    bonus,\r\n    MAP,\r\n    AC,\r\n    die,\r\n    dieMultiplier,\r\n    modifier,\r\n    handleBonusChange,\r\n    handleMAPChange,\r\n    handleACChange,\r\n    handleDieChange,\r\n    handleDieMultiplierChange,\r\n    handleModifierChange,\r\n  ] = useStrike();\r\n\r\n  useEffect(() => {\r\n    // Update parent component of current average damage\r\n    setStrike(routineName, strikeName, result);\r\n  }, [setStrike, routineName, strikeName, result]);\r\n\r\n  return (\r\n    <Box p=\"6\" minW=\"md\" maxW=\"xl\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\">\r\n      <Grid>\r\n        <IconButton\r\n          onClick={() => removeStrike(routineName, strikeName)}\r\n          icon={<CloseIcon />}\r\n          aria-label=\"Remove strike\"\r\n          size=\"xs\"\r\n          colorScheme=\"blue\"\r\n          justifySelf=\"flex-end\"\r\n        />\r\n        <HStack spacing={3}>\r\n          <VStack spacing={3} maxW=\"10em\">\r\n            <Heading as=\"h4\" size=\"md\">\r\n              Attack\r\n            </Heading>\r\n            <StrikeInput inputName=\"Attack Bonus\" value={bonus} handleValueChange={handleBonusChange} />\r\n            <StrikeInput inputName=\"MAP\" value={MAP} handleValueChange={handleMAPChange} />\r\n            <StrikeInput inputName=\"AC\" value={AC} handleValueChange={handleACChange} />\r\n          </VStack>\r\n          <Divider orientation=\"vertical\" />\r\n          <VStack spacing={3} maxW=\"10em\">\r\n            <Heading as=\"h4\" size=\"md\">\r\n              Damage\r\n            </Heading>\r\n            <StrikeInput inputName=\"Die Size\" value={die} handleValueChange={handleDieChange} />\r\n            <StrikeInput inputName=\"Die Multiplier\" value={dieMultiplier} handleValueChange={handleDieMultiplierChange} />\r\n            <StrikeInput inputName=\"Modifiers\" value={modifier} handleValueChange={handleModifierChange} />\r\n          </VStack>\r\n        </HStack>\r\n        <Badge borderRadius=\"full\" fontSize=\"0.8em\" p=\"2\" mt=\"20px\" colorScheme=\"blue\">\r\n          <Center>Average Damage: {result.toFixed(3)}</Center>\r\n        </Badge>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Box, Center, CloseButton, IconButton, Input, SimpleGrid } from \"@chakra-ui/react\";\r\n\r\nimport { SimpleStrike } from \"./SimpleStrike\";\r\nimport { AddIcon, DeleteIcon } from \"@chakra-ui/icons\";\r\n\r\ntype SimpleRoutineProps = {\r\n  routineName: string;\r\n  removeRoutine: Function;\r\n  renameRoutine: Function;\r\n  strikes: Record<string, number>;\r\n  setStrike: Function;\r\n  addStrike: Function;\r\n  removeStrike: Function;\r\n};\r\n\r\nexport function SimpleRoutine({\r\n  routineName,\r\n  removeRoutine,\r\n  renameRoutine,\r\n  strikes,\r\n  setStrike,\r\n  addStrike,\r\n  removeStrike,\r\n}: SimpleRoutineProps) {\r\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    renameRoutine(routineName, event.target.value);\r\n  };\r\n\r\n  const strikesList = Object.keys(strikes).map((strikeName) => (\r\n    <SimpleStrike\r\n      key={strikeName}\r\n      routineName={routineName}\r\n      strikeName={strikeName}\r\n      setStrike={setStrike}\r\n      removeStrike={removeStrike}\r\n    />\r\n  ));\r\n\r\n  const gridColumns = [1, 1, 3];\r\n  const gridRows = [1, 1, 3];\r\n\r\n  // let fillerBoxes;\r\n  // switch (strikesList.length % 3) {\r\n  //   case 0:\r\n  //     fillerBoxes = 2;\r\n  //     break;\r\n  //   case 1:\r\n  //     fillerBoxes = 1;\r\n  //     break;\r\n  //   case 2:\r\n  //     fillerBoxes = 0;\r\n  //     break;\r\n  // }\r\n\r\n  // const fillerBoxesList = [...Array(fillerBoxes)].map(_ => (\r\n  //   <Box />\r\n  // ))\r\n\r\n  return (\r\n    <SimpleGrid\r\n      spacing={4}\r\n      columns={gridColumns}\r\n      rows={gridRows}\r\n      borderWidth=\"1px\"\r\n      borderRadius=\"12px\"\r\n      padding=\"12px\"\r\n    >\r\n      <Input\r\n        placeholder=\"Routine name\"\r\n        gridColumnStart={2}\r\n        defaultValue={routineName}\r\n        onBlur={handleNameChange}\r\n        border=\"0px\"\r\n        textAlign=\"center\"\r\n        fontSize=\"3xl\"\r\n        _focus={{border: \"none\", color: \"blue.400\"}}\r\n        _hover={{color: \"blue.400\"}}\r\n\r\n      />\r\n      <CloseButton justifySelf=\"end\" onClick={() => removeRoutine(routineName)} />\r\n      {strikesList}\r\n      <Center>\r\n        <IconButton\r\n          aria-label=\"Add strike\"\r\n          onClick={() => addStrike(routineName)}\r\n          icon={<AddIcon />}\r\n          colorScheme=\"blue\"\r\n        />\r\n      </Center>\r\n    </SimpleGrid>\r\n  );\r\n}\r\n","import React, { useState, useCallback } from \"react\";\r\n\r\nimport { SimpleGrid, VStack, Center, Box, Stack, Text, HStack, Container, Wrap } from \"@chakra-ui/layout\";\r\nimport { Button, IconButton, Stat, StatGroup, StatLabel, StatNumber } from \"@chakra-ui/react\";\r\nimport { AddIcon } from \"@chakra-ui/icons\";\r\n\r\nimport { ACByLevel } from \"./info_drawers/ACByLevel\";\r\nimport { AttackByLevel } from \"./info_drawers/AttackByLevel\";\r\nimport { SimpleRoutine } from \"./SimpleRoutine\";\r\n\r\nimport { renameObjectKey } from \"../utils/util_functions\";\r\n\r\nexport function SimpleCalculator() {\r\n  const [routines, setRoutines] = useState<Record<string, Record<string, number>>>({\r\n    'Routine 1': { strike_1: 0 },\r\n  });\r\n  const [routineCounter, setRoutineCounter] = useState(1);\r\n  const [strikeCounter, setStrikeCounter] = useState(1);\r\n\r\n  console.log(routines);\r\n  console.log(`Routine counter: ${routineCounter}`);\r\n  console.log(`Strike counter: ${strikeCounter}`);\r\n\r\n  const incrementRoutineCounter = () => {\r\n    setRoutineCounter((prevCounter) => prevCounter + 1);\r\n  };\r\n\r\n  const incrementStrikeCounter = () => {\r\n    setStrikeCounter((prevCounter) => prevCounter + 1);\r\n  };\r\n\r\n  // TODO: doesn't need to be memoized\r\n  const setRoutine = useCallback((routineName: string, routineValue: Record<string, number>) => {\r\n    setRoutines((prevRoutines) => ({\r\n      ...prevRoutines,\r\n      [routineName]: routineValue,\r\n    }));\r\n  }, []);\r\n\r\n  const addRoutine = () => {\r\n    setRoutine(`Routine ${routineCounter + 1}`, { [`strike_${strikeCounter}`]: 0 });\r\n    incrementRoutineCounter();\r\n  };\r\n\r\n  const removeRoutine = useCallback((routineName: string) => {\r\n    setRoutines((prevRoutines) => {\r\n      const { [routineName]: removed, ...newRoutines } = prevRoutines;\r\n      return newRoutines;\r\n    });\r\n  }, []);\r\n\r\n  const renameRoutine = useCallback((oldRoutineName: string, newRoutineName: string) => {\r\n    setRoutines((prevRoutines) => renameObjectKey(prevRoutines, oldRoutineName, newRoutineName));\r\n  }, []);\r\n\r\n  const setStrike = useCallback((routineName: string, strikeName: string, strikeValue: number = 0) => {\r\n    console.log(\"Entered setStrike\");\r\n    setRoutines((prevRoutines) => ({\r\n      ...prevRoutines,\r\n      [routineName]: {\r\n        ...prevRoutines[routineName],\r\n        [strikeName]: strikeValue,\r\n      },\r\n    }));\r\n  }, []);\r\n\r\n  const addStrike = useCallback(\r\n    (routineName: string) => {\r\n      setStrike(routineName, `strike_${strikeCounter + 1}`);\r\n      incrementStrikeCounter();\r\n    },\r\n    [setStrike, strikeCounter]\r\n  );\r\n\r\n  const removeStrike = useCallback((routineName: string, strikeName: string) => {\r\n    setRoutines((prevRoutines) => {\r\n      const { [routineName]: routine } = prevRoutines;\r\n      const { [strikeName]: removed, ...rest } = routine;\r\n\r\n      const newRoutines = {\r\n        ...prevRoutines,\r\n        [routineName]: rest,\r\n      };\r\n\r\n      return newRoutines;\r\n    });\r\n  }, []);\r\n\r\n  const routinesDamage = Object.entries(routines).map(([routineName, strikes]) => [\r\n    routineName,\r\n    Object.values(strikes).reduce((a, b) => a + b, 0),\r\n  ]);\r\n\r\n  const routinesDamageList = routinesDamage.map(([routineName, damage], i) => (\r\n    <Stat padding=\"15px\">\r\n      <StatLabel size=\"sm\">\r\n        <Text fontSize=\"3vh\" whiteSpace=\"nowrap\">{routineName || `Routine ${i+1}`}</Text>\r\n      </StatLabel>\r\n      <StatNumber>\r\n        <Text fontSize=\"3vh\">{damage.toFixed(2)}</Text>\r\n      </StatNumber>\r\n    </Stat>\r\n  ));\r\n\r\n  const routineList = Object.entries(routines).map(([routineName, strikes]) => (\r\n    <SimpleRoutine\r\n      key={routineName}\r\n      routineName={routineName}\r\n      removeRoutine={removeRoutine}\r\n      renameRoutine={renameRoutine}\r\n      strikes={strikes}\r\n      setStrike={setStrike}\r\n      addStrike={addStrike}\r\n      removeStrike={removeStrike}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <Box position=\"fixed\" left={0}>\r\n        <Stack>\r\n          <ACByLevel />\r\n          <AttackByLevel />\r\n        </Stack>\r\n      </Box>\r\n\r\n      <Center>\r\n        <StatGroup>{routinesDamageList}</StatGroup>\r\n      </Center>\r\n\r\n      <VStack spacing={5} mt=\"4vh\">\r\n        {routineList}\r\n        <Button onClick={addRoutine} colorScheme=\"blue\">\r\n          Add Routine\r\n        </Button>\r\n      </VStack>\r\n    </>\r\n  );\r\n}\r\n","export const renameObjectKey = (oldObject: any, oldKey: any, newKey: any) => {\r\n  const keys = Object.keys(oldObject);\r\n\r\n  return keys.reduce((newObject, key) => {\r\n    if (key === oldKey) {\r\n      newObject[newKey] = oldObject[oldKey];\r\n    } else {\r\n      newObject[key] = oldObject[key];\r\n    }\r\n    return newObject;\r\n  }, {});\r\n};\r\n","import * as React from \"react\";\n\nimport { ChakraProvider, Box, Grid, theme } from \"@chakra-ui/react\";\n\nimport { ColorModeSwitcher } from \"./components/ColorModeSwitcher\";\nimport { SimpleCalculator } from \"./components/SimpleCalculator\";\n\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <Box fontSize=\"xl\">\n      <Grid p={3}>\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\n        <SimpleCalculator />\n      </Grid>\n    </Box>\n  </ChakraProvider>\n);\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./template_scripts/reportWebVitals\"\nimport * as serviceWorker from \"./template_scripts/serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}